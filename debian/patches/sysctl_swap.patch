Description: Use sysctl for swap usage information in GNU/kFreeBSD.
 Use sysctl instead of kvm_getswapinfo() to read the swap usage information in
 GNU/kFreeBSD.  This removes the need for a Build-Depends on libkvm-dev and
 having a setgid binary.
Author: Doug Torrance <dtorrance@monmouthcollege.edu>
Last-Update: 2014-10-13

--- a/src/mem_freebsd.c
+++ b/src/mem_freebsd.c
@@ -11,38 +11,18 @@
 #endif
 
 #include <stdio.h>
-#include <unistd.h>
 #include <stdlib.h>
 #include <string.h>
 #include "mem.h"
 
-#include <kvm.h>
-#include <fcntl.h>
+#include <vm/vm_param.h>
 #include <sys/errno.h>
 #include <sys/sysctl.h>
 #include <time.h>
 
-static kvm_t *kvm_data;
-
 /* initialize function */
 void mem_init(void)
 {
-	kvm_data = kvm_open(NULL, NULL, NULL, O_RDONLY, "kvm_open");
-
-	if (kvm_data == NULL) {
-		fprintf(stderr, "can't open kernel virtual memory");
-		exit(1);
-	}
-
-	/* drop setgid & setuid (the latter should not be there really) */
-	seteuid(getuid());
-	setegid(getgid());
-
-	if (geteuid() != getuid() || getegid() != getgid()) {
-		fprintf(stderr, "unable to drop privileges");
-		exit(1);
-	}
-
 	return;
 }
 
@@ -101,17 +81,30 @@
 	if (swap_firsttime ||
 	    (((new_swappgsin > swappgsin) || (new_swappgsout > swappgsout))
 	     && cur_time > last_time_swap + 1)) {
-
-		struct kvm_swap swap;
-		int n;
+		int mib[2], n;
+		size_t mibsize, size;
+		struct xswdev xsw;
+
+		mibsize = sizeof(mib) / sizeof(mib[0]);
+		if (sysctlnametomib("vm.swap_info", mib, &mibsize) == -1) {
+			fprintf(stderr, "sysctlnametomib() failed: %s\n", strerror(errno));
+			exit(1);
+		}
 
 		swapmax = 0;
 		swapused = 0;
 
-		n = kvm_getswapinfo(kvm_data, &swap, 1, 0);
-		if (n >= 0 && swap.ksw_total != 0) {
-			swapmax = swap.ksw_total;
-			swapused = swap.ksw_used;
+		for (n = 0; ; n++) {
+			mib[mibsize] = n;
+			size = sizeof(xsw);
+			if (sysctl(mib, mibsize + 1, &xsw, &size, NULL, 0) == -1) {
+				if (errno == ENOENT)
+					break;
+				fprintf(stderr, "sysctl() failed: %s\n", strerror(errno));
+				exit(1);
+			}
+			swapmax += xsw.xsw_nblks;
+			swapused += xsw.xsw_used;
 		}
 
 		swap_firsttime = 0;
